{
    "version": "https://jsonfeed.org/version/1",
    "title": "心如止水",
    "subtitle": "SteelTo",
    "icon": "https://csz5667757.github.io/images/favicon.ico",
    "description": "我的博客",
    "home_page_url": "https://csz5667757.github.io",
    "items": [
        {
            "id": "https://csz5667757.github.io/2022/03/05/javase/keySplitUtil/",
            "url": "https://csz5667757.github.io/2022/03/05/javase/keySplitUtil/",
            "title": "以等号分割的键值对字符串转JSON工具类",
            "date_published": "2022-03-05T23:51:00.000Z",
            "content_html": "<h1 id=\"以等号分割的键值对字符串转json工具类\"><a class=\"anchor\" href=\"#以等号分割的键值对字符串转json工具类\">#</a> 以等号分割的键值对字符串转 JSON 工具类</h1>\n<p>在数据处理的过程中需要将类似下面这种结构的数据转换为 json 格式的字符串，写了下面这个工具类实现转换</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>uid<span class=\"token operator\">=</span><span class=\"token number\">1111</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token number\">.74</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">=</span><span class=\"token number\">2.2</span><span class=\"token number\">.0</span><span class=\"token number\">.200</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要是使用逗号加空格的这种方式进行分割定位每一个键值对，然后以第一个等号为分隔符分开 key 和 value。能够满足一些基本的无特殊字符情况的 JSON 转化。同时支持多层嵌套结构的数据。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * 格式转换工具类</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @since 2021-11-02</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormatUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> analysis <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"report\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    - 将 studio 非标准数据转化为 json</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    - eg: &#123;uid=1111, version=0.1.74, version=2.2.0.200&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    - @return json 格式数据</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isJson</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMatchBrace</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token class-name\">String</span> strip <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\">// 特殊字符处理</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        strip <span class=\"token operator\">=</span> strip<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        strip <span class=\"token operator\">=</span> strip<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      strip <span class=\"token operator\">=</span> strip <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> textArray <span class=\"token operator\">=</span> strip<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 当前的 &#123;&#125; 标识</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 当前指针位置</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> textArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>textArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'&#123;'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          sign <span class=\"token operator\">=</span> sign <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>textArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          sign <span class=\"token operator\">=</span> sign <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>textArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">','</span> <span class=\"token operator\">&amp;&amp;</span> sign <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> textArray<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          words<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getStringUsingIndex</span><span class=\"token punctuation\">(</span>textArray<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          index <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">jsonFormat</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    - 判断是否为 json 格式</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    - @param content 文本</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    - @return 布尔值</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isJsonObject <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isJsonArray <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      isJsonObject <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseArray</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      isJsonArray <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">return</span> isJsonObject <span class=\"token operator\">||</span> isJsonArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    - 判断是否被花括号包裹</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatchBrace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> textChars <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token keyword\">return</span> textChars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'&#123;'</span> <span class=\"token operator\">&amp;&amp;</span> textChars<span class=\"token punctuation\">[</span>textChars<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    - 根据参数从字符数组中获取字符串</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    - @param chars 字符数组</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    - @param index 起始位置</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    - @param end   结束位置</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    - @return 字符串</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStringUsingIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token class-name\">StringBuilder</span> splicing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token keyword\">char</span> aChar <span class=\"token operator\">=</span> chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      splicing<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>aChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">return</span> splicing<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    - 以等号分割的键值对字符串数组转 json</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    - @param words 字符串数组</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    - @return json 数据</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">jsonFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>      <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        analysis<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"occur illegal text:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>      jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">formatJson</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">return</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>需要注意的情况</strong></p>\n<ul>\n<li>对于 value 中有逗号加空格的情况需要特殊处理</li>\n<li>value 为数组的情况需要优化一下此工具类，判断数组中括号的开始和结束来判断数据</li>\n</ul>\n",
            "tags": [
                "java",
                "工具"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2021/07/28/summary/workSummary/",
            "url": "https://csz5667757.github.io/2021/07/28/summary/workSummary/",
            "title": "毕业工作一年总结（java开发）",
            "date_published": "2021-07-28T11:24:00.000Z",
            "content_html": "<h1 id=\"写在前面的话\"><a class=\"anchor\" href=\"#写在前面的话\">#</a> 写在前面的话</h1>\n<p>来深圳工作也差不多有一年多的时间，马上就要离开深圳了，回顾一下过去一年的工作，虽然没有太多的闪亮点，但也是扎扎实实的一年。</p>\n<h1 id=\"工作回顾\"><a class=\"anchor\" href=\"#工作回顾\">#</a> 工作回顾</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">时间</th>\n<th style=\"text-align:center\">内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">2020.7</td>\n<td style=\"text-align:center\">培训、熟悉技术框架</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2020.8-2020.10</td>\n<td style=\"text-align:center\">crud 业务开发</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2020.11</td>\n<td style=\"text-align:center\">数仓工作、kettle（ETL 工具）学习与使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2020.12</td>\n<td style=\"text-align:center\">报表开发、kettle 使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2021.1</td>\n<td style=\"text-align:center\">产品化学习、报表维护</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2021.2</td>\n<td style=\"text-align:center\">高强度配置化工作、系统设计开发、使用 jdk 工具提交 crud 开发效率</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2021.3、4</td>\n<td style=\"text-align:center\">crud 业务开发、三方接口对接工作、业务代码框架设计</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2021.5、6</td>\n<td style=\"text-align:center\">复杂报表功能设计开发、设计模式应用、动态表格设计开发</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2021.7</td>\n<td style=\"text-align:center\">通信客户端开发</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"工作感悟\"><a class=\"anchor\" href=\"#工作感悟\">#</a> 工作感悟</h1>\n<ul>\n<li>沟通、协调 ability 十分重要，在沟通需求时，充分理解需求，评审、反讲需求等，万事俱备才开发</li>\n<li>好的代码需要满足四点：可读性、高性能、复用率高、可扩展性强</li>\n<li>注重基础的编程能力，往往优秀的代码并不是用了各种设计模式或者很复杂的数据结构，而是简单、有效而且稳定的，这就很考验基本功了</li>\n<li>架构往往决定了工程的上限，好的架构提升远大于代码的改进</li>\n<li>事事有抽象，时时有抽象，软件开发过程中抽象的能力无处不在，从需求建模、系统设计、功能设计、代码设计等等，好的抽象能够更符合需求、能够让代码运行的时间更久</li>\n<li>经验诚可贵，编程思想价更高，经验固然重要，但是领悟思想，用于实践，理解精髓，温故知新远远比简单使用经验更加有价值</li>\n<li>社会永远不会缺埋头干活的人，缺的是会拉通对齐的人</li>\n</ul>\n<h1 id=\"工作收获\"><a class=\"anchor\" href=\"#工作收获\">#</a> 工作收获</h1>\n<h2 id=\"技术上\"><a class=\"anchor\" href=\"#技术上\">#</a> 技术上</h2>\n<p>从一个只会 mvc 的 java 小白，用着模板引擎技术写一些简单的 crud 数据库操作，到现在会做一些封装，使用各种工具类，理解设计模式并有实际运用</p>\n<ul>\n<li>了解了函数，以及函数的回调、钩子函数</li>\n<li>接触使用了 SpringCloud 开发组件，nacos、hystrix、feign、gateway</li>\n<li>夯实了 java 基础，反射、注解、多线程、lambda 表达式、集合操作、IO 操作；熟悉了 java 编译、类加载的过程</li>\n<li>通用组件的使用，redis、rabbitmq、xxl-job</li>\n<li>netty 框架的使用与熟悉，重点是消息的拆粘包、多客户端管理、心跳检测、重连机制、同步消息的实现、网络模型、高性能原理</li>\n<li>结合文档，对不同调用方式的三方接口进行对接，如 http、webservice</li>\n<li>spring 框架的深入学习、实际运用，对 ioc、aop 有灵活的使用</li>\n<li>数据库方面，对索引、事务、慢 sql 的优化有相关的经验；对分布式事务有初步的了解</li>\n<li>了解了一个 springboot 程序从创建到打包部署应用的整个过程，以及线上问题的排查与定位</li>\n<li>了解并实际使用过模板方法、策略、工厂、单例设计模式，学习了状态、观察者、责任链模式、代理模式、装饰者模式</li>\n<li>树形结构的表结构设计、接口开发，队列、栈数据结构的使用，递归、层序遍历算法</li>\n</ul>\n<h2 id=\"业务上\"><a class=\"anchor\" href=\"#业务上\">#</a> 业务上</h2>\n<ul>\n<li>公司的业务是普惠金融领域，了解了整个业务的大概流程以及相关整体的数据流</li>\n<li>对于一些慢 sql、复杂数据处理的业务有过接触</li>\n</ul>\n<h1 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h1>\n<blockquote>\n<p>希望是美好的，也许是人间至善，而美好的事物永不消逝。——《肖申克的救赎》</p>\n</blockquote>\n",
            "tags": [
                "个人总结",
                "工作总结"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2021/05/03/javase/dynamicBuild/",
            "url": "https://csz5667757.github.io/2021/05/03/javase/dynamicBuild/",
            "title": "动态编译、类加载及在SpringBoot中的应用",
            "date_published": "2021-05-03T14:11:00.000Z",
            "content_html": "<p>前言</p>\n<blockquote>\n<p>最近在项目中遇到了需要在前端进行导出操作，由于模板的变化性较大，需要对模板的数据结构进行经常性的变更，如将 key-list 结构改变为 key-string 结构，因此需要在前端进行 java 代码录入，利用动态编译和类加载技术进行模板数据的适配。</p>\n</blockquote>\n<h1 id=\"动态编译\"><a class=\"anchor\" href=\"#动态编译\">#</a> 动态编译</h1>\n<p>最开始想到要使用 <code>动态编译</code> 是因为我们项目的前端使用了 <code>vue</code> ，在前端中动态配置了一些事件，实现了在页面上动态改变前端代码。既然前端代码能放在前端，为什么 <code>java代码</code> 不可以呢？<br />\n于是在网上找了些资料，知道了动态编译可以在运行态时动态编译 java 代码，并进行调用。查阅了很多博客后，归纳以后有以下方法实现 java 的动态编译。</p>\n<h2 id=\"toolproviderjava6提供的工具\"><a class=\"anchor\" href=\"#toolproviderjava6提供的工具\">#</a> ToolProvider（java6 提供的工具）</h2>\n<p>因为 ToolProvider 提供的 <code>JavaCompiler</code>  提供了 <code>文件管理器</code> 、 <code>编译过程诊断器</code> 等已经能够满足大多数需求，因此这里着重讲 <code>ToolProvider</code>  这种方式。</p>\n<h3 id=\"调用run方法\"><a class=\"anchor\" href=\"#调用run方法\">#</a> 调用 run 方法</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">complierAndRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t <span class=\"token comment\">// 动态编译</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">JavaCompiler</span> javac <span class=\"token operator\">=</span> <span class=\"token class-name\">ToolProvider</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemJavaCompiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> status <span class=\"token operator\">=</span> javac<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D:\\\\\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"D:/test/AlTest.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有编译成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 动态执行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//Class clz = Class.forName (\"AlTest\");// 返回与带有给定字符串名的类 或接口相关联的 Class 对象。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 自定义类加载器的加载路径</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">MyClassLoader</span> myClassLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 包名 + 类名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">Class</span> clz <span class=\"token operator\">=</span> myClassLoader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AlTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token class-name\">String</span> result<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态方法第一个参数可为 null, 第二个参数为实际传参</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优点：代码简洁，提供的功能全面</li>\n<li>缺点：无法对编译过程的日志进行收集、动态编译所使用的文件依赖在 jar 包环境下无法导入</li>\n</ul>\n<h3 id=\"gettask自定义任务管理器\"><a class=\"anchor\" href=\"#gettask自定义任务管理器\">#</a> getTask 自定义任务管理器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存放编译过程中输出的信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DiagnosticCollector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JavaFileObject</span><span class=\"token punctuation\">></span></span> diagnosticsCollector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DiagnosticCollector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">StandardJavaFileManager</span> standardFileManager <span class=\"token operator\">=</span> javac<span class=\"token punctuation\">.</span><span class=\"token function\">getStandardFileManager</span><span class=\"token punctuation\">(</span>diagnosticsCollector<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 自定义文件管理器，用来存储 class 文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ClassJavaFileManager</span> classJavaFileManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassJavaFileManager</span><span class=\"token punctuation\">(</span>standardFileManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>options<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-cp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>options<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProtectionDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCodeSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">+</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path.separator\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token class-name\">IdDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProtectionDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCodeSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path.separator\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">SifFinConstants</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProtectionDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCodeSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">StringObject</span> stringObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">URI</span><span class=\"token punctuation\">(</span>className <span class=\"token operator\">+</span> <span class=\"token string\">\".java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span><span class=\"token punctuation\">.</span>SOURCE<span class=\"token punctuation\">,</span> javaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">JavaCompiler<span class=\"token punctuation\">.</span>CompilationTask</span> task <span class=\"token operator\">=</span> javac<span class=\"token punctuation\">.</span><span class=\"token function\">getTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> classJavaFileManager<span class=\"token punctuation\">,</span> diagnosticsCollector<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>stringObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Boolean</span> call <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>call<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> compilerMessage <span class=\"token operator\">=</span> <span class=\"token function\">getCompilerMessage</span><span class=\"token punctuation\">(</span>diagnosticsCollector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>compilerMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编译错误！\"</span> <span class=\"token operator\">+</span> compilerMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的关键：使用的是 java 程序中的 <code>文件管理器</code>  ——ClassJavaFileManager，故对于 <code>springboot项目</code> 中对 jar 的多层嵌套打包方式不支持。</p>\n<ul>\n<li>优点：功能最齐全，提供了 <code>文件管理器</code> 、 <code>诊断收集器</code> 等，能够自定义编译过程中的大多数功能。</li>\n<li>缺点：代码的 <code>可读性</code> 不如直接运行 run 方法。对于 springboot 项目中的动态编译必须要重写文件管理器，使用 <code>springboot</code>  的 classpath 访问方式 ( <code>LaunchedURLClassLoader</code> ) 才能够正确的访问到内层依赖文件。</li>\n</ul>\n<p>这里推荐<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEveXVnb25n\">阿里愚公项目</span>中所使用到的 <code>动态编译工具类</code> ，实测在 java 项目中好用！！但是在 sptingboot 项目还是有一定局限性，需要使用自定义 springboot 的文件管理器<br />\n话不多说，贴代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringBootJarFileManager</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">JavaFileManager</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">URLClassLoader</span> classLoader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">StandardJavaFileManager</span> standardJavaFileManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> classBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringBootJarFileManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardJavaFileManager</span> standardJavaFileManager<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URLClassLoader</span> systemLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLClassLoader</span><span class=\"token punctuation\">(</span>systemLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getURLs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> systemLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>standardJavaFileManager <span class=\"token operator\">=</span> standardJavaFileManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> classLoader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JavaFileObject</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> packageName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JavaFileObject</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">String</span> javaPackageName <span class=\"token operator\">=</span> packageName<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">></span></span> urls <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">findResources</span><span class=\"token punctuation\">(</span>javaPackageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token class-name\">URL</span> ll <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token class-name\">String</span> ext_form <span class=\"token operator\">=</span> ll<span class=\"token punctuation\">.</span><span class=\"token function\">toExternalForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token class-name\">String</span> jar <span class=\"token operator\">=</span> ext_form<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ext_form<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token class-name\">String</span> pkg <span class=\"token operator\">=</span> ext_form<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>ext_form<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token class-name\">JarURLConnection</span> conn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JarURLConnection</span><span class=\"token punctuation\">)</span> ll<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JarEntry</span><span class=\"token punctuation\">></span></span> jar_items <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">getJarFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>jar_items<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token class-name\">JarEntry</span> item <span class=\"token operator\">=</span> jar_items<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>pkg<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token class-name\">URI</span> uri <span class=\"token operator\">=</span> URI<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>jar <span class=\"token operator\">+</span> <span class=\"token string\">\"!/\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token class-name\">String</span> binaryName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        binaryName <span class=\"token operator\">=</span> binaryName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> binaryName<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomJavaFileObject</span><span class=\"token punctuation\">(</span>binaryName<span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JavaFileObject</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> packageName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span><span class=\"token punctuation\">></span></span> kinds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> recurse<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JavaFileObject</span><span class=\"token punctuation\">></span></span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">==</span> <span class=\"token class-name\">StandardLocation</span><span class=\"token punctuation\">.</span>PLATFORM_CLASS_PATH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                ret <span class=\"token operator\">=</span> standardJavaFileManager<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> packageName<span class=\"token punctuation\">,</span> kinds<span class=\"token punctuation\">,</span> recurse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">==</span> <span class=\"token class-name\">StandardLocation</span><span class=\"token punctuation\">.</span>CLASS_PATH <span class=\"token operator\">&amp;&amp;</span> kinds<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                ret <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>packageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    ret <span class=\"token operator\">=</span> standardJavaFileManager<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> packageName<span class=\"token punctuation\">,</span> kinds<span class=\"token punctuation\">,</span> recurse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                ret <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">inferBinaryName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JavaFileObject</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">String</span> ret <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CustomJavaFileObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomJavaFileObject</span><span class=\"token punctuation\">)</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>binaryName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                ret <span class=\"token operator\">=</span> standardJavaFileManager<span class=\"token punctuation\">.</span><span class=\"token function\">inferBinaryName</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSameFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileObject</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileObject</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">handleOption</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> current<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> remaining<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">return</span> standardJavaFileManager<span class=\"token punctuation\">.</span><span class=\"token function\">handleOption</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasLocation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">return</span> location <span class=\"token operator\">==</span> <span class=\"token class-name\">StandardLocation</span><span class=\"token punctuation\">.</span>CLASS_PATH <span class=\"token operator\">||</span> location <span class=\"token operator\">==</span> <span class=\"token class-name\">StandardLocation</span><span class=\"token punctuation\">.</span>PLATFORM_CLASS_PATH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">JavaFileObject</span> <span class=\"token function\">getJavaFileForInput</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span> kind<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">FileObject</span> <span class=\"token function\">getFileForInput</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> packageName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> relativeName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">FileObject</span> <span class=\"token function\">getFileForOutput</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> packageName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> relativeName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileObject</span> sibling<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            classBytes<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">isSupportedOption</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> option<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">getClassBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">JavaFileObject</span> <span class=\"token function\">getJavaFileForOutput</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span> kind<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                                                   <span class=\"token class-name\">FileObject</span> sibling<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kind <span class=\"token operator\">==</span> <span class=\"token class-name\">JavaFileObject<span class=\"token punctuation\">.</span>Kind</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryOutputJavaFileObject</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> classBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token keyword\">return</span> standardJavaFileManager<span class=\"token punctuation\">.</span><span class=\"token function\">getJavaFileForOutput</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">,</span> sibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomJavaFileObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">JavaFileObject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> binaryName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">URI</span> uri<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">binaryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token keyword\">return</span> binaryName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">CustomJavaFileObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> binaryName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URI</span> uri<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uri <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>binaryName <span class=\"token operator\">=</span> binaryName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            name <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">getSchemeSpecificPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Kind</span> <span class=\"token function\">getKind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNameCompatible</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> simpleName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Kind</span> kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token class-name\">String</span> baseName <span class=\"token operator\">=</span> simpleName <span class=\"token operator\">+</span> kind<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token keyword\">return</span> kind<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token function\">getKind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">NestingKind</span> <span class=\"token function\">getNestingKind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Modifier</span> <span class=\"token function\">getAccessLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">URI</span> <span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputStream</span> <span class=\"token function\">openInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">toURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">OutputStream</span> <span class=\"token function\">openOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Reader</span> <span class=\"token function\">openReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> ignoreEncodingErrors<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token function\">getCharContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> ignoreEncodingErrors<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Writer</span> <span class=\"token function\">openWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>动态类加载</code> ，这里就不详细介绍，因为动态编译后的 class 字节码要被实例化，可以使用反射、类加载，因为编译后的字节码直接存在内存中，这里优先使用类加载的方式。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> classBytes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token class-name\">ClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classBytes<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> classBytes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        r <span class=\"token operator\">=</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        r <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用runtime来进行动态编译\"><a class=\"anchor\" href=\"#使用runtime来进行动态编译\">#</a> 使用 RunTime 来进行动态编译</h2>\n<p>这种方式相当于调用命令行 javac 命令的方式，这种非 api 的方式比较灵活，但是对于初学者来说不建议，出现问题的概率较高。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runtime</span> runtime<span class=\"token operator\">=</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Process</span> process<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java -cp D:/myjava  HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">InputStream</span> inputStream<span class=\"token operator\">=</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">BufferedReader</span> fBufferedInputStream<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">String</span> string<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">=</span>fBufferedInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"排坑心得\"><a class=\"anchor\" href=\"#排坑心得\">#</a> 排坑心得</h1>\n<h2 id=\"动态编译技术的认识-运用-上项目过程\"><a class=\"anchor\" href=\"#动态编译技术的认识-运用-上项目过程\">#</a> 动态编译技术的认识、运用、上项目过程</h2>\n<ol>\n<li>在分析了项目需求，对于项目中需求有了清晰的认识后，确认了使用动态编译方案</li>\n<li>在本地调试好后，上服务器功能挂掉，通过服务器日志、增加诊断收集器功能定位到是导入不进去 jar 包</li>\n<li>在定位问题后，自己尝试解决（压缩 jar 包，在 javac 命令中引入依赖包），后来觉得实现方式不太对，找了部门大佬沟通后终于定位到是 springboot 特有的 jar 包打包方式</li>\n<li>尝试过使用上传 class 文件再进行动态类加载（这样就失去了动态编译的意义）</li>\n<li>目前是还没有做太多安全相关的工作，后面会使用非对称加密、脱敏处理等手段对动态编译的代码进行检测和保护。（因为动态编译是一个双刃剑，特别是放在 web 程序中，相当于对外界说我的程序是公共的，大家都来看。所以安全保护措施就十分重要）</li>\n</ol>\n<h2 id=\"心得\"><a class=\"anchor\" href=\"#心得\">#</a> 心得</h2>\n<ol>\n<li>在定位问题时，如果环境不一样，尽可能去创造一个相同环境在本地测试</li>\n<li>在遇到新技术时还是要提前去了解原理再使用</li>\n<li>还要是熟悉 java 生态，java se、java ee、spring、springboot、springcloud 等等，在问题定位时能够在对不同的 java 架构下可能存在的环境问题不同</li>\n</ol>\n<blockquote>\n<p>参考文章：<br />\n1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEveXVnb25n\"> 阿里愚公项目动态编译工具类</span><br />\n 2.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlcnRleHovYXJ0aWNsZS9kZXRhaWxzLzEwNzMyNjQ3MA==\"> 博客 —springboot 2 下 java 代码动态编译动态加载实现</span><br />\n 3.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWxsaWFvL2NvbXBpbGVyL2lzc3Vlcw==\">github issue— 对于动态编译来 springboot 下的应用讨论</span><br />\n 4.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob3VmYW55YW5nX2NoaW5hL2FydGljbGUvZGV0YWlscy84Mjc2NzQwNg==\"> 博客 —java 实现动态编译并动态加载</span></p>\n</blockquote>\n",
            "tags": [
                "java",
                "动态编译技术"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2021/04/27/database/isolation/",
            "url": "https://csz5667757.github.io/2021/04/27/database/isolation/",
            "title": "mysql的acid的实现原理以及隔离策略详解",
            "date_published": "2021-04-27T16:18:00.000Z",
            "content_html": "<p>前言：</p>\n<blockquote>\n<p>ACID 是一组数据库设计原则，强调的是在重要业务数据以及关键任务应用的可靠性。mysql 中 innoDB 严格遵循 ACID 模型，因此数据不会损坏，结果也不会因为软件崩溃或者硬件损坏等异常情况而失真。</p>\n</blockquote>\n<h1 id=\"原子性\"><a class=\"anchor\" href=\"#原子性\">#</a> 原子性</h1>\n<pre><code>一个事务要么都做，要么都不做。mysql在这方面提供了auto-commit、commit、rollback功能。\n</code></pre>\n<p>那么 mysql 是如何实现事务的原子性呢？( <code>通过undo log)</code> <br />\n <code>undo log</code>  名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经执行成功的 sql 语句，他需要记录你要回滚的响应日志信息，例如</p>\n<ul>\n<li>1. 当你 delete 一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert 这条旧数据</li>\n<li>2. 当你 update 一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行 update 操作</li>\n<li>3. 当你 insert 一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行 delete 操作</li>\n</ul>\n<p><code>undo log</code>  记录了这些回滚需要的信息，当事务执行失败或调用了 rollback，导致事务需要回滚，<br />\n便可利用 <code>undo log</code>  中的信息将数据回滚到修改之前的样子。</p>\n<h1 id=\"一致性\"><a class=\"anchor\" href=\"#一致性\">#</a> 一致性</h1>\n<blockquote>\n<p>一致性是指事务执行前后，数据处于一种合法的状态，这种状态是语义上的而不是语法上的。</p>\n</blockquote>\n<pre><code>一致性是acid的目的，只有实现了aid，才能做到数据的一致性。\n</code></pre>\n<h1 id=\"隔离性\"><a class=\"anchor\" href=\"#隔离性\">#</a> 隔离性</h1>\n<blockquote>\n<p>事务隔离是数据库处理的基础之一。隔离级别是一种配置，用于在多个事务同时进行更改和执行查询时微调性能与结果的可靠性、一致性、可重复性之间的平衡</p>\n</blockquote>\n<p>mysql 提供了读未提交、读已提交、可重复度、串行化四种隔离策略（使用 innodb 存储引擎情形）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">事务隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">读未提交（read-uncommitted）</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不可重复读（read-committed）</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可重复读（repeatable-read）</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">串行化（serializable）</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<p>下面描述了 mysql 是如何支持不同的事务级别，从最常用级别到最不常用级别</p>\n<h2 id=\"可重复读\"><a class=\"anchor\" href=\"#可重复读\">#</a> 可重复读</h2>\n<p>这是 InnoDB 的默认隔离级别。 同一事务中的一致读取将读取由第一次读取建立的快照（ <code>基于mysql的mvvc多版本并发控制，每一行数据的更改都会产生一个新的版本实现</code> ）。这意味着，如果 SELECT 在同一事务中发出多个普通（非锁定）语句，则这些 SELECT 语句的结果彼此之间也是一致的。</p>\n<p>对于锁定读取 （SELECT 使用 <code>FOR UPDATE</code>  或 <code>LOCK IN SHARE MODE</code> ）， <code>UPDATE</code>  和 <code>DELETE</code>  语句，锁定取决于语句是使用具有唯一搜索条件的唯一索引还是范围类型搜索条件。</p>\n<ul>\n<li>对于具有唯一搜索条件的唯一索引，InnoDB 仅锁定找到的索引记录，而不锁定其前的间隙。</li>\n<li>对于其他搜索条件，InnoDB 使用 <code>gap locks</code>  (间隙锁定) 或 <code>next-key locks</code>  (下一键锁定) 来锁定扫描的索引范围， 以阻止其他会话插入该范围所覆盖的间隙。</li>\n</ul>\n<h3 id=\"存在的问题\"><a class=\"anchor\" href=\"#存在的问题\">#</a> 存在的问题</h3>\n<p>mysql 在可重复读的策略下存在幻读的问题。<br />\n幻读会在 <code>RU</code> / <code>RC</code> / <code>RR</code>  级别下出现，SERIALIZABLE 则杜绝了幻读，但 RU/RC 下还会存在脏读、不可重复读，故我们就以 RR 级别来研究 幻读，排除其他干扰。</p>\n<p><code>注意</code> ：RR 级别下存在幻读的可能，但也是可以使用对记录手动加  <code>X锁</code>  的方法消除幻读。   <code>SERIALIZABLE</code>  正是对所有事务都加 <code>X锁</code> 才杜绝了 <code>幻读</code> ，但很多场景下我们的业务 sql 并不会存在 幻读 的风险。 <code>SERIALIZABLE</code>  的一刀切虽然事务绝对安全，但性能会有很多不必要的损失。故可以在 <code>RR</code>  下根据业务需求决定是否加锁，存在幻读风险我们加锁，不存在就不加锁，事务安全与性能兼备，这也是  <code>RR</code>  作为 mysql 默认隔是个事务离级别的原因，所以需要正确的理解 幻读。</p>\n<p>这里给出我对幻读的比较白话的理解：</p>\n<blockquote>\n<p>幻读，并不是说两次读取获取的结果集不同，幻读侧重的方面是某一次的 select 操作得到的结果所表征的数据状态无法支撑后续的业务操作。更为具体一些：select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读。</p>\n</blockquote>\n<p>这里给出 mysql 幻读的比较形象的场景:<br />\n 事务 T1<br />\n<img data-src=\"/static/img/isolation/%E5%B9%BB%E8%AF%BBT1.png\" alt=\"事务T1\" title=\"幻读\" /><br />\n 事务 T2<br />\n<img data-src=\"/static/img/isolation/%E5%B9%BB%E8%AF%BBT2.png\" alt=\"事务T2\" title=\"幻读\" /></p>\n<blockquote>\n<p>step1 T1: SELECT * FROM users WHERE id = 1;<br />\nstep2 T2: INSERT INTO users VALUES (1, 'big cat');<br />\nstep3 T1: INSERT INTO users` VALUES (1, 'big cat');<br />\nstep4 T1: SELECT * FROM users WHERE id = 1;</p>\n</blockquote>\n<pre><code>T1 ：主事务，检测表中是否有 id 为 1 的记录，没有则插入，这是我们期望的正常业务逻辑。\n \nT2 ：干扰事务，目的在于扰乱 T1 的正常的事务执行。\n</code></pre>\n<p>在  <code>RR</code>  隔离级别下， <code>step1</code> 、 <code>step2</code>  是会正常执行的， <code>step3</code>  则会报错主键冲突，对于 T1 的业务来说执行失败的，这里 T1 就是发生了幻读，因为 T1 在  <code>step1</code>  中读取的数据状态并不能支撑后续的业务操作，T1：“见鬼了，我刚才读到的结果应该可以支持我这样操作才对啊，为什么现在不可以”。T1 不敢相信的又执行了  <code>step4</code> ，发现和  <code>step1</code>  读取的结果是一样的（RR 下的  <code>MVVC机制</code> ）。此时，幻读无疑已经发生，T1 无论读取多少次，都查不到 id = 1 的记录，但它的确无法插入这条他通过读取来认定不存在的记录（此数据已被 T2 插入），对于 T1 来说，它幻读了。</p>\n<h3 id=\"幻读问题的解决\"><a class=\"anchor\" href=\"#幻读问题的解决\">#</a> 幻读问题的解决</h3>\n<p>其实 RR 也是可以避免幻读的，通过对 select 操作手动加 行 X 锁（ <code>SELECT ... FOR UPDATE</code>  这也正是  <code>SERIALIZABLE</code>  隔离级别下会隐式为你做的事情），同时还需要知道，即便当前记录不存在，比如 id=1 是不存在的，当前事务也会获得一把记录锁（因为 InnoDB 的行锁锁定的是索引，故记录实体存在与否没关系，存在就加  <code>行X锁</code> ，不存在就加  <code>next-key lock</code>  间隙 X 锁），其他事务则无法插入此索引的记录，故杜绝了幻读。</p>\n<p>在  <code>SERIALIZABLE</code>  隔离级别下，step1 执行时是会隐式的添加  <code>行(X)锁</code>  /  <code>gap(X)锁</code> 的，从而 step2 会被阻塞，step3 会正常执行，待 T1 提交后，T2 才能继续执行（主键冲突执行失败），对于 T1 来说业务是正确的，成功的阻塞扼杀了扰乱业务的 T2，对于 T1 来说他前期读取的结果是可以支撑其后续业务的。</p>\n<p>所以 mysql 的幻读并非什么读取两次返回结果集不同，而是事务在插入事先检测不存在的记录时，惊奇的发现这些数据已经存在了，之前的检测读获取到的数据如同鬼影一般。<br />\n<em>不可重复读侧重表达 <code>读-读</code> ，幻读则是说  <code>读-写</code> ，用写来证实读的是鬼影。</em></p>\n<h2 id=\"读已提交\"><a class=\"anchor\" href=\"#读已提交\">#</a> 读已提交</h2>\n<p>即使在同一事务中，每个一致的读取都将设置并读取其自己的新快照。<br />\n对于锁定读取（ <code>SELECT ... FOR UPDATE</code>  或 <code>LOCK IN SHARE MODE</code> ）， <code>UPDATE</code>  语句和 <code>DELETE</code>  语句，InnoDB 仅锁定索引记录，而不锁定它们之间的间隙，因此允许在锁定记录旁边自由插入新记录。间隙锁定仅用于外键约束检查和重复键检查。</p>\n<p>由于禁用了间隙锁定，因此可能会产生幻影问题，因为其他会话可以在间隙中插入新行。<br />\n使用 READ COMMITTED 具有其他效果：</p>\n<ul>\n<li>\n<p>对于 <code>UPDATE</code>  或  <code>DELETE</code>  语句， InnoDB 仅对其更新或删除的行持有锁。MySQL 评估 WHERE 条件后，将释放不匹配行的记录锁 。这大大降低了死锁的可能性，但是仍然可以发生。</p>\n</li>\n<li>\n<p>对于 UPDATE 语句，如果某行已被锁定，则 InnoDB 执行 “半一致” 读取，将最新的提交版本返回给 MySQL，以便 MySQL 可以确定该行是否与的 WHERE 条件 匹配 UPDATE。如果该行匹配（必须更新），则 MySQL 会再次读取该行，这一次将 InnoDB 其锁定或等待对其进行锁定。</p>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t <span class=\"token punctuation\">(</span>a <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这种情况下，表没有索引，因此搜索和索引扫描使用隐藏的聚集索引 ( <code>row-no</code> ) 进行记录锁定，而不是使用索引列。假设一个会话 UPDATE 使用以下语句执行 ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Session A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">UPDATE</span> t <span class=\"token keyword\">SET</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token keyword\">WHERE</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还假设第二个会话  <code>UPDATE</code>  通过在第一个会话的语句之后执行以下语句来执行：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Session B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">UPDATE</span> t <span class=\"token keyword\">SET</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">WHERE</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 <code>InnoDB</code>  执行每个 UPDATE，它首先为其读取的每一行获取一个排他锁，然后确定是否对其进行修改。如果  <code>InnoDB</code>  不修改该行，则释放该锁。否则， InnoDB 保留该锁直到事务结束。这会影响事务处理，如下所示。</p>\n<h3 id=\"示例1-使用可重复读\"><a class=\"anchor\" href=\"#示例1-使用可重复读\">#</a> 示例 1 使用可重复读</h3>\n<p>当使用默认 <code>REPEATABLE READ</code>  隔离级别时，第一个  <code>UPDATE</code>  将在读取的每一行上获取一个 x 锁，并且 <code>不会释放其中的任何一个</code> ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr></table></figure><p>第二个 <code>UPDATE</code>  尝试获取任何锁的块将立即阻止（因为第一个更新已在所有行上保留了锁），并且直到第一个 <code>UPDATE</code>  提交或回滚时才继续进行：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> block <span class=\"token operator\">and</span> wait <span class=\"token keyword\">for</span> <span class=\"token keyword\">first</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">to</span> <span class=\"token keyword\">commit</span> <span class=\"token operator\">or</span> roll back</pre></td></tr></table></figure><h3 id=\"示例2-使用读已提交\"><a class=\"anchor\" href=\"#示例2-使用读已提交\">#</a> 示例 2 使用读已提交</h3>\n<p>使用 READ COMMITTED 相反，则第 UPDATE 一个将在读取的每一行上获取一个 x 锁，并为未修改的行 <code>释放x锁</code> ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于第二个 <code>UPDATE</code> ，  <code>InnoDB</code>  执行 “半一致” 读取，将它读取的每一行的最新提交版本返回给 MySQL，以便 MySQL 可以确定该行是否符合以下  <code>WHERE</code>  条件  <code>UPDATE</code> ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retain x<span class=\"token operator\">-</span><span class=\"token keyword\">lock</span></pre></td></tr></table></figure><p>但是，如果 WHERE 条件包括索引列并且 InnoDB 使用了该索引，则在获取和保留记录锁时仅考虑索引列。在下面的示例中，第一个  <code>UPDATE</code>  在 b = 2 的每一行上获取并保留一个 x 锁，第二个 UPDATE 在尝试获取同一记录上的 x 锁时会被 <code>阻塞</code> ，因为它也使用在 b 列上定义的索引。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t <span class=\"token punctuation\">(</span>a <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> c <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INDEX</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Session A</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">UPDATE</span> t <span class=\"token keyword\">SET</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">WHERE</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># Session B</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">UPDATE</span> t <span class=\"token keyword\">SET</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">WHERE</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"读未提交\"><a class=\"anchor\" href=\"#读未提交\">#</a> 读未提交</h2>\n<p>SELECT 语句以非锁定方式执行，但是可能会使用行的早期版本。因此，使用此隔离级别，此类读取不一致。这也称为  <code>脏读</code> 。否则，此隔离级别的工作方式类似于  <code>READ COMMITTED</code> 。</p>\n<h2 id=\"串行化\"><a class=\"anchor\" href=\"#串行化\">#</a> 串行化</h2>\n<p>此级别类似于 <code>REPEATABLE READ</code> ，但是 InnoDB 将所有普通 SELECT 语句隐式转换为 <code>SELECT ... LOCK IN SHARE MODE</code>  当 <code>autocommit</code>  禁用。如果  <code>autocommit</code>  启用，则 SELECT 是其自身的事务。因此，它被认为是只读的，如果作为一致（非阻塞）读取执行并且不需要阻塞其他事务，则可以序列化。（如果其他事务已修改所选行，则要使用 SELECT 强制阻塞，请禁用  <code>autocommit</code> 。）</p>\n<h1 id=\"持久性\"><a class=\"anchor\" href=\"#持久性\">#</a> 持久性</h1>\n<blockquote>\n<p><code>持久性</code> 是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>\n</blockquote>\n<pre><code>mysql是如何实现事务的持久性？(`redo log`)\nmysql是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再刷会磁盘中。如果此时突然宕机，内存中\n的数据就会丢失。\n提出方案：在事务提交时直接把数据写进磁盘 -&gt; 方案存在的问题：只修改一个页面的一个字节，就要将整个页刷入内存，浪费资源效率。毕竟一个页面16kb，只改一点点东西就将16kb的内容刷入磁盘，不太合理。同时一个事务大多涉及到多个数据页，这些数据页不可能都是相邻的，属于随机IO，显然随机IO的速度是很慢的\n</code></pre>\n<p>于是 mysql 就提出了 <code>redo log</code>  来解决上面的问题。在进行数据修改的时候，不仅在内存中操作，还会在 <code>redo</code>  的内容中记录这次操作。当事务提交时，会先将 <code>redo log</code>  进行刷盘（ <code>redo log</code>  一部分在内存中，一部分在磁盘上）。当数据库宕机重启的时候，会将 <code>redo log</code>  的内容恢复到数据库中，再根据  <code>undo log</code>  和 <code>bin log</code>  来决定是回滚数据还是提交数据。</p>\n<h2 id=\"采用redo-log的好处是什么\"><a class=\"anchor\" href=\"#采用redo-log的好处是什么\">#</a> 采用 redo log 的好处是什么？</h2>\n<p>其实好处就是将 <code>redo log</code>  进行刷盘比数据页刷盘效率高，具体表现如下</p>\n<ul>\n<li><code>redo log</code>  体积小，毕竟只记录了那一页修改了什么，因此体积小、刷盘快</li>\n<li><code>redo log</code>  是一直往末尾追加，属于顺序 IO。效率显然比随机 IO 来得快</li>\n</ul>\n<blockquote>\n<p>参考文章：<br />\n1.14.2 InnoDB and the ACID Model <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL215c3FsLWFjaWQuaHRtbA==\">mysql5.7 官方手册 ACID</span><br />\n2.14.7.2.1 Transaction Isolation Levels <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL215c3FsLWFjaWQuaHRtbA==\">mysql5.7 官方手册 事务隔离级别</span><br />\n 3.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmp6aGVuZy9wLzEwODQxMDMxLmh0bWw=\">Mysql 中事务 ACID 实现原理 (一个拿着底层薪资操着架构师的心的码农)</span><br />\n4.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjU2Njc4OD91dG1fc291cmNlPXRhZy1uZXdlc3Q=\">mysql 幻读的详解、实例及解决办法 (big_cat)</span></p>\n</blockquote>\n",
            "tags": [
                "数据库",
                "事务隔离级别"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2021/04/24/database/index/",
            "url": "https://csz5667757.github.io/2021/04/24/database/index/",
            "title": "深入理解mysql数据库索引及其应用场景",
            "date_published": "2021-04-24T10:30:00.000Z",
            "content_html": "<blockquote>\n<p>前言：在数据库中我们最常见的操作就是查询，所以查询的效率高与否很大程度上影响了程序的性能，<br />\n而合理的运用索引能够使我们的查询效率更高，提高程序的运行速度</p>\n</blockquote>\n<h1 id=\"索引是什么\"><a class=\"anchor\" href=\"#索引是什么\">#</a> 索引是什么</h1>\n<ul>\n<li>根据 mysql 官方给出的定义：索引用于快速查找具有特定列值的行。</li>\n<li>没有索引，mysql 必须从第一行开始，然后通读整个表找到相关的行。表越大，那么花费越多。</li>\n<li>如果表中有相关列的索引，mysql 可以快速确定要在数据文件中查找的位置，而不必查看每一行数据，这比顺序读要快得多。</li>\n</ul>\n<h1 id=\"索引有哪些\"><a class=\"anchor\" href=\"#索引有哪些\">#</a> 索引有哪些</h1>\n<p>1. <code>主键索引</code> <br />\n索引列中的值必须是唯一的，且不允许有空值<br />\n 2. <code>唯一索引</code> <br />\n索引列中的值必须是唯一的，允许有空值，允许有多个空值<br />\n 3. <code>普通索引</code> <br />\n mysql 中基本索引类型，没有什么限制，允许有空值和重复值<br />\n 4. <code>全文索引</code> <br />\n全文索引只支持 Innodb、MyIsam 表格，并且只能对 CHAR、VARCHAR、TEXT 列。索引总是在整个列上进行；<br />\n不支持列前缀索引，如果指定，则忽略前缀长度。<br />\n当字段长度较大时，如果创建普通索引，在进行 like 模糊匹配时效率很低，这时可以创建全文索引<br />\n 5. <code>前缀索引</code> <br />\n在文本类型如 CHAR、VARCHAR、TEXT 类型的列上创建索引时，可以指定索引列的长度。<br />\n6. <code>其他（按照索引列数量分类）</code> <br />\n单列索引<br />\n组合索引：组合索引的使用需要遵循最左原则。如果在索引定义中以正确的顺序指定列，则单个组合索引<br />\n可以加快对同一表的几种查询的速度。</p>\n<p>还有如空间索引等不常用的索引就不一一列举</p>\n<h1 id=\"使用explain查询计划来查看索引的命中情况\"><a class=\"anchor\" href=\"#使用explain查询计划来查看索引的命中情况\">#</a> 使用 explain 查询计划来查看索引的命中情况</h1>\n<pre><code>使用explain语句，mysql解释了它将如何处理该语句，包括有关如何连接表以及何种顺序连接表的信息\n，检查所有查询是否真正使用在表中创建的索引\n</code></pre>\n<h2 id=\"explain输出格式\"><a class=\"anchor\" href=\"#explain输出格式\">#</a> explain 输出格式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列</th>\n<th style=\"text-align:center\">意义</th>\n<th style=\"text-align:center\">详解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">该查询标识符</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">select_type</td>\n<td style=\"text-align:center\">该查询类型</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">表名</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">partitions</td>\n<td style=\"text-align:center\">匹配的分区</td>\n<td style=\"text-align:center\">查询将从中匹配记录的分区。NULL 值用于未分区的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">联接类型</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">possible_keys</td>\n<td style=\"text-align:center\">可能的索引选择</td>\n<td style=\"text-align:center\">该 possible_keys 列指示索引，mysql 可以选择从这些索引中查找表中的行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key</td>\n<td style=\"text-align:center\">实际选择的索引</td>\n<td style=\"text-align:center\">该 key 列指示 mysql 实际决定使用的密钥（索引）如果 mysql 决定使用 possible_keys 索引之一来查找行，则将该索引列为键值，但也有不使用 possible_keys 中索引的情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key_len</td>\n<td style=\"text-align:center\">所选键的长度</td>\n<td style=\"text-align:center\">该 key_len 列指示 mysql 决定使用的索引的长度，当索引字段为定长数据类型，比如 char，int，datetime，如果有是否为 NULL 的标记，这个标记需要占用 1 个字节。对于变长数据类型，比如：varchar，除了是否为 NULL 的标记外，还需要有长度信息，需要占用 2 个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">列与索引的比较</td>\n<td style=\"text-align:center\">该 ref 列显示将哪些列或常量与该 key 列中命名的索引进行比较，以 从表中选择行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rows</td>\n<td style=\"text-align:center\">估计要检查的行</td>\n<td style=\"text-align:center\">该 rows 列表示 mysql 认为执行查询必须检查的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">filtered</td>\n<td style=\"text-align:center\">按表条件过滤的行百分比</td>\n<td style=\"text-align:center\">该 filtered 列指示按表条件过滤的表行的估计百分比。最大值为 100，这表示未对行进行过滤。值从 100 减小表示过滤量增加。 rows 显示检查的估计行数，rows× filtered 显示与下表连接的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Extra</td>\n<td style=\"text-align:center\">附加信息</td>\n<td style=\"text-align:center\">此列包含有关 mysql 如何解析查询的其他信息</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"mysql索引分析innodb存储引擎\"><a class=\"anchor\" href=\"#mysql索引分析innodb存储引擎\">#</a> mysql 索引分析（innodb 存储引擎）</h1>\n<h2 id=\"主键索引聚簇索引\"><a class=\"anchor\" href=\"#主键索引聚簇索引\">#</a> 主键索引（聚簇索引）</h2>\n<pre><code>每个InnoDB表都有一个聚簇索引，聚簇索引使用B+树组织结构，叶子节点存储的数据是整行记录。一般情况下，\n聚簇索引就是主键索引，当一个表没有创建主键索引时，InnoDB会自动创建一个rowId字段来构建聚簇索引。\nInnoDb创建索引的具体规则如下\n</code></pre>\n<blockquote>\n<p>1. 但在表上定义主键 PRIMARY KEY，InnoDB 将主键索引用作聚簇索引。<br />\n2. 如果表没有定义主键，InnoDB 会选择第一个不为 NULL 的唯一索引列用作聚簇索引。<br />\n3. 如果以上两个都没有，InnoDB 会使用一个 6 字节长整型的隐式字段 ROWID 字段构建聚簇索引。该 ROWID 字段会在插入新行时自动递增</p>\n</blockquote>\n<p>除聚簇索引之外的所有索引都成为辅助索引，在 InnoDB 中，辅助索引的叶子节点上存储的是该行的主键值部。<br />\n在检索时，InnoDB 使用此主键值在聚簇索引中搜索行数据。</p>\n<h3 id=\"for-example\"><a class=\"anchor\" href=\"#for-example\">#</a> for example</h3>\n<p>这里以 user_innodb 为例，user_innodb 的 id 列为 <code>主键</code> ，age 列为 <code>普通索引</code> 。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>user_innodb<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span>       <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span>      <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>     <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>idx_age<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/static/img/index/%E4%BE%8B%E8%A1%A8.png\" alt=\"主键索引例表\" title=\"主键索引例表\" /><br />\n InnoDB 的数据和索引存储在一个文件 t_user_innodb.ibd 中。InnoDB 的数据组织方式，是聚簇索引。</p>\n<p>主键索引的叶子节点会存储数据行，辅助索引只会存储主键值。<br />\n<img data-src=\"/static/img/index/%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95.png\" alt=\"主键索引结构\" title=\"主键索引结构\" /><br />\n等值查询数据：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> user_innodb <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>先在主键树中从根节点开始检索，将根节点加载到内存，比较 28&lt;75，走左路。（1 次磁盘 IO）</li>\n<li>将左子树节点加载到内存中，比较 16&lt;28&lt;47，向下检索。（1 次磁盘 IO）</li>\n<li>检索到叶节点，将节点加载到内存中遍历，比较 16&lt;28，18&lt;28，28=28。查找到值等于 28 的索引项，直接可以获取整行数据。将改记录返回给客户端。（1 次磁盘 IO）</li>\n</ul>\n<p><code>磁盘IO数量：3次。</code> <br />\n<img data-src=\"/static/img/index/%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E6%9F%A5%E8%AF%A2%E6%AD%A5%E9%AA%A4.png\" alt=\"主键索引查询步骤\" title=\"主键索引查询步骤\" /></p>\n<h2 id=\"辅助索引\"><a class=\"anchor\" href=\"#辅助索引\">#</a> 辅助索引</h2>\n<p>除聚簇索引之外的所有索引都称为辅助索引，InnoDB 的辅助索引只会存储主键值而非磁盘地址。</p>\n<p>以表 user_innodb 的 age 列为例，age 索引的索引结果如下图。<br />\n<img data-src=\"/static/img/index/%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95.png\" alt=\"辅助索引结构\" title=\"辅助索引结构\" /><br />\n底层叶子节点的按照（age，id）的顺序排序，先按照 age 列从小到大排序，age 列相同时按照 id 列从小到大排序。</p>\n<p>使用辅助索引需要检索两遍索引：首先检索辅助索引获得主键，然后使用主键到主索引中检索获得记录。<br />\n画图分析等值查询的情况：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_user_innodb <span class=\"token keyword\">where</span> age<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/static/img/index/%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%9F%A5%E8%AF%A2%E6%AD%A5%E9%AA%A4.png\" alt=\"辅助索引查询步骤\" title=\"辅助索引查询步骤\" /><br />\n根据在辅助索引树中获取的主键 id，到主键索引树检索数据的过程称为回表查询。</p>\n<p><code>磁盘IO数：辅助索引3次+获取记录回表3次</code></p>\n<h2 id=\"组合索引\"><a class=\"anchor\" href=\"#组合索引\">#</a> 组合索引</h2>\n<p>还是以自己创建的一个表为例：表 abc_innodb，id 为主键索引，创建了一个联合索引 idx_abc (a,b,c)。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>abc_innodb<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>a<span class=\"token punctuation\">`</span>  <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>     <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">`</span>b<span class=\"token punctuation\">`</span>  <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>     <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">`</span>c<span class=\"token punctuation\">`</span>  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">`</span>d<span class=\"token punctuation\">`</span>  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>idx_abc<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>a<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>b<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>c<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>[select * from abc_innodb order by a, b, c, id;]<br />\n<img data-src=\"/static/img/index/%E7%BB%84%E5%90%88%E7%B4%A2%E5%BC%95%E4%BE%8B%E8%A1%A8.png\" alt=\"组合索引例表\" title=\"组合索引例表\" /><br />\n组合索引的数据结构：<br />\n<img data-src=\"/static/img/index/%E7%BB%84%E5%90%88%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png\" alt=\"组合索引结构\" title=\"组合索引结构\" /></p>\n<h3 id=\"组合索引的查询过程\"><a class=\"anchor\" href=\"#组合索引的查询过程\">#</a> 组合索引的查询过程：</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> abc_innodb <span class=\"token keyword\">where</span> a <span class=\"token operator\">=</span> <span class=\"token number\">13</span> <span class=\"token operator\">and</span> b <span class=\"token operator\">=</span> <span class=\"token number\">16</span> <span class=\"token operator\">and</span> c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/static/img/index/%E7%BB%84%E5%90%88%E7%B4%A2%E5%BC%95%E6%9F%A5%E8%AF%A2%E6%AD%A5%E9%AA%A4.png\" alt=\"组合索引查询步骤\" title=\"组合索引查询步骤\" /></p>\n<h3 id=\"最左匹配原则\"><a class=\"anchor\" href=\"#最左匹配原则\">#</a> 最左匹配原则</h3>\n<p>最左前缀匹配原则和联合索引的 <code>索引存储结构</code> 和 <code>检索方式</code> 是有关系的。</p>\n<p>在组合索引树中，最底层的叶子节点按照第一列 a 列从左到右递增排列，但是 b 列和 c 列是无序的，b 列只有在 a 列值相等的情况下小范围内递增有序，而 c 列只能在 a，b 两列相等的情况下小范围内递增有序。</p>\n<p>就像上面的查询，B + 树会先比较 a 列来确定下一步应该搜索的方向，往左还是往右。如果 a 列相同再比较 b 列。但是如果查询条件没有 a 列，B + 树就不知道第一步应该从哪个节点查起。</p>\n<p>可以说创建的 idx_abc (a,b,c) 索引，相当于创建了 (a)、（a,b）（a,b,c）三个索引。</p>\n<p><code>组合索引的最左前缀匹配原则：使用组合索引查询时，mysql会一直向右匹配直至遇到范围查询(&gt;、&lt;、between、like)就停止匹配。</code></p>\n<h2 id=\"覆盖索引\"><a class=\"anchor\" href=\"#覆盖索引\">#</a> 覆盖索引</h2>\n<p>覆盖索引并不是说是索引结构，覆盖索引是一种很常用的优化手段。因为在使用辅助索引的时候，我们只可以拿到主键值，相当于获取数据还需要再根据主键查询主键索引再获取到数据。但是试想下这么一种情况，在上面 abc_innodb 表中的组合索引查询时，如果我只需要 abc 字段的，那是不是意味着我们查询到组合索引的叶子节点就可以直接返回了，而不需要回表。这种情况就是覆盖索引。<br />\n可以看一下执行计划：<br />\n覆盖索引的情况：<br />\n<img data-src=\"/static/img/index/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95.png\" alt=\"使用到覆盖索引\" title=\"使用到覆盖索引\" /><br />\n未使用到覆盖索引：<br />\n<img data-src=\"/static/img/index/%E9%9D%9E%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95.png\" alt=\"未使用到覆盖索引\" title=\"未使用到覆盖索引\" /></p>\n<h2 id=\"使用心得\"><a class=\"anchor\" href=\"#使用心得\">#</a> 使用心得</h2>\n<h3 id=\"避免回表\"><a class=\"anchor\" href=\"#避免回表\">#</a> 避免回表</h3>\n<p>在 InnoDB 的存储引擎中，使用辅助索引查询的时候，因为辅助索引叶子节点保存的数据不是当前记录的数据而是当前记录的主键索引，索引如果需要获取当前记录完整数据就必然需要根据主键值从主键索引继续查询。这个过程我们成位回表。想想回表必然是会消耗性能影响性能。那如何避免呢？</p>\n<p>使用索引覆盖，举个例子：现有 User 表（id (PK),name (key),sex,address,hobby…）</p>\n<p>如果在一个场景下，select id,name,sex from user where name ='zhangsan'; 这个语句在业务上频繁使用到，而 user 表的其他字段使用频率远低于它，在这种情况下，如果我们在建立 name 字段的索引的时候，不是使用单一索引，而是使用联合索引（name，sex）这样的话再执行这个查询语句是不是根据辅助索引查询到的结果就可以获取当前语句的完整数据。这样就可以有效地避免了回表再获取 sex 的数据。</p>\n<p><code>这里就是一个典型的使用覆盖索引的优化策略减少回表的情况。</code></p>\n<h3 id=\"联合索引的使用\"><a class=\"anchor\" href=\"#联合索引的使用\">#</a> 联合索引的使用</h3>\n<p><code>联合索引</code> ，在建立索引的时候，尽量在多个单列索引上判断下是否可以使用联合索引。联合索引的使用不仅可以节省空间，还可以更容易的使用到索引覆盖。试想一下，索引的字段越多，是不是更容易满足查询需要返回的数据呢。比如联合索引（a_b_c），是不是等于有了索引：a，a_b，a_b_c 三个索引，这样是不是节省了空间，当然节省的空间并不是三倍于（a，a_b，a_b_c）三个索引，因为索引树的数据没变，但是索引 data 字段的数据确实真实的节省了。</p>\n<p><code>联合索引的创建原则</code> ，在创建联合索引的时候因该把频繁使用的列、区分度高的列放在前面，频繁使用代表索引利用率高，区分度高代表筛选粒度大，这些都是在索引创建的需要考虑到的优化场景，也可以在常需要作为查询返回的字段上增加到联合索引中，如果在联合索引上增加一个字段而使用到了覆盖索引，那我建议这种情况下使用联合索引。</p>\n<p>联合索引的使用</p>\n<ul>\n<li>考虑当前是否已经存在多个可以合并的单列索引，如果有，那么将当前多个单列索引创建为一个联合索引。</li>\n<li>当前索引存在频繁使用作为返回字段的列，这个时候就可以考虑当前列是否可以加入到当前已经存在索引上，使其查询语句可以使用到覆盖索引。</li>\n</ul>\n<h2 id=\"索引失效的场景\"><a class=\"anchor\" href=\"#索引失效的场景\">#</a> 索引失效的场景</h2>\n<p>1. 在使用前导模糊匹配且没有使用覆盖索引时<br />\n 2. 在发生类型转换如将文本型字段使用数值进行条件查询</p>\n",
            "tags": [
                "数据库",
                "mysql索引"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2021/04/21/interview/interviewExp/",
            "url": "https://csz5667757.github.io/2021/04/21/interview/interviewExp/",
            "title": "面试经历",
            "date_published": "2021-04-21T21:28:00.000Z",
            "content_html": "<h1 id=\"记录2021323-面试记录\"><a class=\"anchor\" href=\"#记录2021323-面试记录\">#</a> 记录 2021.3.23 面试记录</h1>\n<p>0. 之前做过哪些项目，最近的一次项目主要负责什么<br />\n 1.hashmap 数据结构的底层实现原理<br />\n 2.hashmap 是否是线程安全的？有哪些线程安全的类来代替 hashmap<br />\n3.hashtable、concurrenthashmap 底层是如何实现线程安全的？<br />\n4.java 中创建多线程有哪些方式？<br />\n5. 如果要线程执行完有返回值要用那种方式创建多线程？<br />\n6. 线程池有哪几种实现？<br />\n7. 如果要你设计一个线程池有哪些入参？<br />\n8. 项目中出现慢 sql，已经定位到具体的 sql 语句，如何解决？<br />\n9.activiti 工作流实现原理？<br />\n10. 项目中是如何实现分布式事务的？<br />\n11. 分布式事务的底层实现由哪些方案？<br />\n12.springcloud 有哪些组件？<br />\n13.spring 的 AOP 实现原理？<br />\n14.JDK 动态代理有哪些，实现原理？</p>\n<h1 id=\"记2021421面试记录\"><a class=\"anchor\" href=\"#记2021421面试记录\">#</a> 记 2021.4.21 面试记录</h1>\n<p>0. 问了一下现在做的项目的规模，以及服务、中台是怎样划分的；对于加班能够接受的范围<br />\n 1. 之前做过数据库设计？数据库设计有哪些要点、规范（答到了满足业务需求、还有长度的设定、满足范式）<br />\n2. 数据库生成 id 的长度是多少，以及 id 生成的策略（答了 mp 生成 id 的策略，使用了雪花算法以及使用物理地址、时间戳散列）<br />\n3. 数据库如何满足第三范式，以及为什么要满足第三范式？（这个只回答了三范式的概念，没有具体答出三范式的好处）<br />\n4.explain 查询计划中有哪些属性，以及对应的作用（答了 row、key、using index（没有这个属性 QAQ））<br />\n5. 查询计划中 key 属性的作用，是否有了解过 key_length（答了 key 用来看是否是主键索引，其实是看命中索引的类型）<br />\n6. 在设计表的时候是否考虑到索引，唯一索引、普通索引的区别（平时没有用到索引，太久了都忘了）<br />\n7. 项目中使用的数据库隔离级别是哪个，数据库的事务隔离级别有哪些？（读未提交、读已提交、可重复读、串行化四种，居然忘了读未提交）<br />\n8. 不可重复读级别与读已提交事务隔离级别有什么区别，举例说明（居然答到了 CAS 的 ABA 问题上去）<br />\n9. 服务中使用了 springCloud 中那个组件来做网关？（GateWay）<br />\n10. 如果有一个请求是否能直接请求到自己微服务的接口（饶了半天最终说了是自己微服务会对 cookie 做校验）<br />\n11. 一个 request 包含哪些部分（请求头、请求体）<br />\n12.cookie 是存放在 request 的哪个部分（在 HttpServletRequest 下是有专门属性存放 cookie）<br />\n13. 网关是如何做登录校验的？使用了 AOP？（使用过滤器）<br />\n14. 在 springboot 中下载文件如何与前端交互（通过请求的 outputStream 方法返回给前端）<br />\n15. 如何返回使前端知道文件的类型（通过传输文件名）<br />\n16. 有什么想补充或者想问的</p>\n<h1 id=\"记2021616面试记录\"><a class=\"anchor\" href=\"#记2021616面试记录\">#</a> 记 2021.6.16 面试记录</h1>\n<p>0. 自我介绍<br />\n 1. 让简单介绍了下项目，主要是做什么，顺便问了下项目的并发<br />\n 2. 介绍下 RBAC 模型（讲了数据库的表设计）<br />\nJava 基础部分：<br />\n3. 基本数据类型有哪些，为什么有基础数据类型和包装类<br />\n 4. 值传递和引用传递的区别<br />\n 5. 介绍下堆栈<br />\n 6. 内存泄漏问题，举例 (这个回答道了 OOM，后来面试官引导垃圾回收不掉，答到了 GC root 链引用，递归导致)<br />\n 7. 用过哪些 jdk 的包<br />\n 8. 静态变量和实例变量的区别<br />\n 9. 接口和抽象类的区别<br />\n 10. 数据库中优化 sql 的办法<br />\n 11. 手撕题 压缩字符串<br />\n 12. 问目前在哪里，反问问题 (1. 技术栈 2. 项目人员)</p>\n<h1 id=\"记2021622面试记录\"><a class=\"anchor\" href=\"#记2021622面试记录\">#</a> 记 2021.6.22 面试记录</h1>\n<p>0. 手撕算法 1. 求一个数的平方根 2. 判断是否为回文整数<br />\n 1. 谈下多线程<br />\n 2. 谈下大数据<br />\n 3.SQL 优化经历<br />\n 4. 大学的专业，问学的是不是计算机相关，是否是自学<br />\n 5. 来 HW 的目的<br />\n 6. 谈谈多软件的理解<br />\n 7. 项目有多大，在项目中主要负责什么<br />\n 8. 谈谈简历上印象深刻的 aop + 反射</p>\n<p>持续更新中....</p>\n",
            "tags": [
                "面试经历",
                "java面试"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2020/04/05/javase/thread/",
            "url": "https://csz5667757.github.io/2020/04/05/javase/thread/",
            "title": "多线程与高并发学习笔记（一）",
            "date_published": "2020-04-05T11:25:21.000Z",
            "content_html": "<h1 id=\"java内存模型\"><a class=\"anchor\" href=\"#java内存模型\">#</a> java 内存模型</h1>\n<p>作用：jmm 是一种规范，它规范了 jvm 是如何与计算机内存协同工作的，它规定了一个线程如何和何时能看到其它线程修改过的共享变量的值，以及在必须时如何同步的访问共享变量</p>\n<h2 id=\"堆\"><a class=\"anchor\" href=\"#堆\">#</a> 堆</h2>\n<p>运行时的数据区，优势是可以动态分配内存大小，垃圾回收器可以自动收走不在需要的数据。缺点是由于需要动态分配内存，存取的速度较慢</p>\n<h2 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h2>\n<p>存取速度快，仅次于计算机里的寄存器，栈的数据可以共享。缺点是存储数据的大小是确定的，缺乏灵活性。栈中存储了基本数据类型变量，如 int，short, long,  float, double,char,byte, boolean</p>\n<p><img data-src=\"/static/img/image-20200229160121072.png\" alt=\"image-20200229160121072\" /></p>\n<p><img data-src=\"/static/img/image-20200229160331686.png\" alt=\"image-20200229160331686\" /></p>\n<h1 id=\"并发的优势与风险\"><a class=\"anchor\" href=\"#并发的优势与风险\">#</a> 并发的优势与风险</h1>\n<p><img data-src=\"/static/img/image-20200229161133437.png\" alt=\"image-20200229161133437\" /></p>\n<h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<p>线程安全性：当多个线程访问某个类时，不管运行时环境采用<strong>何种调度方式</strong>或者这些进程将如何交替执行，并且在主调代码中<strong>不需要任何额外的同步或协同</strong>，这个类都能表现出<strong>正确的行为</strong>，那么就称这个类是线程安全的。</p>\n<ul>\n<li>原子性：提供了互斥访问，同一时刻只能有一个线程来对它进行操作</li>\n</ul>\n<p><img data-src=\"/static/img/image-20200229184042558.png\" alt=\"image-20200229184042558\" /></p>\n<p>CAS 算法：比较和交换 在 Atomic 包里用法较多，比如 AtomicInteger 的 incrementAndGet 方法</p>\n<p>调用了 Unsafe 类里的 native 方法 getAndAddInt</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndAddInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> var4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> var5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            var5 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIntVolatile</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">,</span> var5<span class=\"token punctuation\">,</span> var5 <span class=\"token operator\">+</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 通过 getIntVolatile 方法获取 var1 对象的变量在主存中的最新值 var5 与 var2 相比较，如过相同才会执行相加操作，不相同会继续读取在主存中的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> var5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>可见性：一个线程对主内存的修改可以及时的被其他线程观察到</li>\n</ul>\n<p><img data-src=\"/static/img/image-20200229184442326.png\" alt=\"image-20200229184442326\" /></p>\n<p><img data-src=\"/static/img/image-20200229184731544.png\" alt=\"image-20200229184731544\" /></p>\n<p><img data-src=\"/static/img/image-20200229184709974.png\" alt=\"image-20200229184709974\" /></p>\n<p>应用场景：</p>\n<p><img data-src=\"/static/img/image-20200229185347816.png\" alt=\"image-20200229185347816\" /></p>\n<ul>\n<li>\n<p>有序性：一个线程观察其它线程中的指令执行顺序，由于指令重排序的存在，该观察结果一般杂乱无序</p>\n<p><img data-src=\"/static/img/image-20200229190220735.png\" alt=\"image-20200229190220735\" /></p>\n<hr />\n</li>\n</ul>\n<p><img data-src=\"/static/img/image-20200229185840173.png\" alt=\"image-20200229185840173\" /></p>\n<hr />\n<p><img data-src=\"/static/img/image-20200229185915892.png\" alt=\"image-20200229185915892\" /></p>\n<hr />\n<p><img data-src=\"/static/img/image-20200229190005066.png\" alt=\"image-20200229190005066\" /></p>\n<h2 id=\"安全发布对象\"><a class=\"anchor\" href=\"#安全发布对象\">#</a> 安全发布对象</h2>\n<p><img data-src=\"/static/img/image-20200302110803490.png\" alt=\"image-20200302110803490\" /></p>\n",
            "tags": [
                "java",
                "多线程",
                "多线程"
            ]
        },
        {
            "id": "https://csz5667757.github.io/2020/02/22/tool/%E4%BD%BF%E7%94%A8MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/",
            "url": "https://csz5667757.github.io/2020/02/22/tool/%E4%BD%BF%E7%94%A8MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/",
            "title": "使用MarkDown编辑器写博客",
            "date_published": "2020-02-22T15:37:00.000Z",
            "content_html": "<h1 id=\"使用markdown写下我的第一篇博客\"><a class=\"anchor\" href=\"#使用markdown写下我的第一篇博客\">#</a> 使用 MarkDown 写下我的第一篇博客</h1>\n<h2 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h2>\n<h2 id=\"段落格式\"><a class=\"anchor\" href=\"#段落格式\">#</a> 段落格式</h2>\n<p>段落的换行使用两个空格加回车<br />\n<em>斜体文字</em><br />\n<em>粗体文字</em><br />\n下面有一个分割线</p>\n<hr />\n<p><s>这段文字有删除线</s></p>\n<p>&lt;u&gt; 使用 u 标签为文本添加下划线 &lt;/u&gt;</p>\n<h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<ol>\n<li>使用 “+” 来分点</li>\n</ol>\n<ul>\n<li>第一点</li>\n<li>第二点</li>\n<li>第三点</li>\n</ul>\n<ol start=\"2\">\n<li>第二项<br />\n创建脚注<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup><br />\n hexo 本身是不支持脚标的，这里我使用了 hexo-renderer-markdown-it 这个插件</li>\n</ol>\n<h2 id=\"区块使用\"><a class=\"anchor\" href=\"#区块使用\">#</a> 区块使用</h2>\n<blockquote>\n<p>使用 “&gt;”、“&gt;&gt;”、“&gt;&gt;&gt;” 来为区块分级</p>\n<blockquote>\n<p>第二级</p>\n<blockquote>\n<p>第三级</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h2>\n<p>使用 “ <code>[语言（可选）]      </code> ”</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> markdown<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一段java代码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"外部链接\"><a class=\"anchor\" href=\"#外部链接\">#</a> 外部链接</h2>\n<p>使用 “[链接名称]  (链接地址)”<br />\n 这是一个链接<span class=\"exturl\" data-url=\"aHR0cDovLzQ3LjEwMy4xMDcuMjMzOjgwOTA=\">毕业设计地址</span></p>\n<h2 id=\"添加图片\"><a class=\"anchor\" href=\"#添加图片\">#</a> 添加图片</h2>\n<p>使用 “![图片的替代文字]  (图片链接 &quot;title&quot;)”<br />\n<img data-src=\"http://47.103.107.233:8088/111/timg.jpg\" alt=\"迪丽热巴\" title=\"迪丽热巴\" /></p>\n<h2 id=\"使用表格\"><a class=\"anchor\" href=\"#使用表格\">#</a> 使用表格</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:right\">年龄</th>\n<th style=\"text-align:center\">性别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">陈世哲</td>\n<td style=\"text-align:right\">22</td>\n<td style=\"text-align:center\">男</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">郑奇奇</td>\n<td style=\"text-align:right\">22</td>\n<td style=\"text-align:center\">男</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td style=\"text-align:left\">使用 “</td>\n<td style=\"text-align:right\">” 隔开每一列</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“</td>\n<td style=\"text-align:right\">---</td>\n<td style=\"text-align:center\">” 用来区分表头与表体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“</td>\n<td style=\"text-align:right\">:---:</td>\n<td style=\"text-align:center\">” 为居中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“</td>\n<td style=\"text-align:right\">:---</td>\n<td style=\"text-align:center\">” 为居左</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“</td>\n<td style=\"text-align:right\">---:</td>\n<td style=\"text-align:center\">” 为居右</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"插入流程图-时序图-甘特图等\"><a class=\"anchor\" href=\"#插入流程图-时序图-甘特图等\">#</a> 插入流程图、时序图、甘特图等</h2>\n<p>在 typora 中画好后将源码粘贴至编辑器</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>码出未来 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "工具",
                "MarkDown"
            ]
        }
    ]
}